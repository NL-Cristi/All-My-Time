//go:build ignore
// +build ignore

// mktzlist.go is a code generator that produces a file containing all time zones.
// It reads the zoneinfo.zip from $GOROOT/lib/time/zoneinfo.zip.

package main

import (
	"archive/zip"
	"bytes"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
)

func main() {
	// Get the GOROOT path.
	b, err := exec.Command("go", "env", "GOROOT").Output()
	if err != nil {
		fmt.Fprintf(os.Stderr, "error getting GOROOT: %v\n", err)
		os.Exit(1)
	}
	goroot := string(bytes.TrimSpace(b))

	// Open the zoneinfo.zip file.
	zipname := filepath.Join(goroot, "lib", "time", "zoneinfo.zip")
	zipf, err := os.Open(zipname)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error opening %s: %v\n", zipname, err)
		os.Exit(1)
	}
	defer zipf.Close()

	zipfi, err := zipf.Stat()
	if err != nil {
		fmt.Fprintf(os.Stderr, "error stating %s: %v\n", zipname, err)
		os.Exit(1)
	}

	// Create the output file.
	outFile := os.Getenv("GOFILE")
	if outFile == "" {
		outFile = "tzlist_gen.go"
	}
	f, err := os.Create(outFile)
	if err != nil {
		fmt.Fprintf(os.Stderr, "error creating %s: %v\n", outFile, err)
		os.Exit(1)
	}
	defer f.Close()

	// Write header information.
	fmt.Fprintln(f, "// Code generated by \"mktzlist.go\"; DO NOT EDIT.")
	fmt.Fprintln(f, "//go:generate go run mktzlist.go")
	fmt.Fprintln(f)
	// Use the same package as this file's GO package.
	pkg := os.Getenv("GOPACKAGE")
	if pkg == "" {
		pkg = "main"
	}
	fmt.Fprintf(f, "package %s\n\n", pkg)
	fmt.Fprintln(f, "var TimeZones = []string{")

	// Open the zip file as a reader.
	zr, err := zip.NewReader(zipf, zipfi.Size())
	if err != nil {
		fmt.Fprintf(os.Stderr, "error reading zip: %v\n", err)
		os.Exit(1)
	}

	// Walk through the zip archive.
	fs.WalkDir(zr, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if !d.IsDir() {
			fmt.Fprintf(f, "\t%q,\n", path)
		}
		return nil
	})

	fmt.Fprintln(f, "}")
}
